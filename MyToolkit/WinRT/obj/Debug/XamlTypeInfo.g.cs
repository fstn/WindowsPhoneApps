//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MyToolkit.MyToolkit_WinRT_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","4.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MyToolkit.MyToolkit_WinRT_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_NotConverter() { return new global::MyToolkit.Converters.NotConverter(); }

        private object Activate_1_VisibilityConverter() { return new global::MyToolkit.Converters.VisibilityConverter(); }

        private object Activate_2_WatermarkedTextBox() { return new global::MyToolkit.Controls.WatermarkedTextBox(); }

        private object Activate_3_DataGrid() { return new global::MyToolkit.Controls.DataGrid(); }

        private object Activate_5_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumn>(); }

        private object Activate_6_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumn>(); }

        private object Activate_8_ImageButton() { return new global::MyToolkit.Controls.ImageButton(); }

        private object Activate_13_ExtendedListBox() { return new global::MyToolkit.Controls.ExtendedListBox(); }

        private object Activate_14_Pivot() { return new global::MyToolkit.Controls.Pivot(); }

        private object Activate_15_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.PivotItem>(); }

        private object Activate_16_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.PivotItem>(); }

        private object Activate_17_PivotItem() { return new global::MyToolkit.Controls.PivotItem(); }

        private object Activate_18_FadingImage() { return new global::MyToolkit.Controls.FadingImage(); }

        private object Activate_21_Page() { return new global::MyToolkit.Paging.Page(); }

        private object Activate_22_Frame() { return new global::MyToolkit.Paging.Frame(); }

        private object Activate_23_AppBarToggleButton() { return new global::MyToolkit.Controls.AppBarToggleButton(); }

        private object Activate_24_AppBarButton() { return new global::MyToolkit.Controls.AppBarButton(); }

        private object Activate_25_TextButton() { return new global::MyToolkit.Controls.TextButton(); }

        private object Activate_26_MenuListBox() { return new global::MyToolkit.Controls.MenuListBox(); }

        private object Activate_27_ColorChooser() { return new global::MyToolkit.Controls.ColorChooser(); }

        private object Activate_32_PanAndZoomViewer() { return new global::MyToolkit.Controls.PanAndZoomViewer(); }

        private object Activate_33_PanAndZoomImage() { return new global::MyToolkit.Controls.PanAndZoomImage(); }

        private object Activate_34_SettingsHeader() { return new global::MyToolkit.Controls.SettingsHeader(); }

        private object Activate_35_ExtendedItemsControl() { return new global::MyToolkit.Controls.ExtendedItemsControl(); }

        private object Activate_36_NavigationList() { return new global::MyToolkit.Controls.NavigationList(); }

        private object Activate_37_ExtendedTextBox() { return new global::MyToolkit.Controls.ExtendedTextBox(); }

        private object Activate_38_PopupBase() { return new global::MyToolkit.UI.PopupBase(); }

        private object Activate_40_List() { return new global::System.Collections.Generic.List<global::MyToolkit.UI.Popups.ListPickerBoxItem>(); }

        private object Activate_41_ListPickerBoxItem() { return new global::MyToolkit.UI.Popups.ListPickerBoxItem(); }

        private object Activate_43_TimePicker() { return new global::MyToolkit.Controls.TimePicker(); }

        private object Activate_45_DatePicker() { return new global::MyToolkit.Controls.DatePicker(); }

        private void VectorAdd_5_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumn>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumn)item;
            collection.Add(newItem);
        }

        private void VectorAdd_6_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumn>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumn)item;
            collection.Add(newItem);
        }

        private void VectorAdd_15_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.PivotItem>)instance;
            var newItem = (global::MyToolkit.Controls.PivotItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_16_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.PivotItem>)instance;
            var newItem = (global::MyToolkit.Controls.PivotItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_40_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.UI.Popups.ListPickerBoxItem>)instance;
            var newItem = (global::MyToolkit.UI.Popups.ListPickerBoxItem)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "String":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Boolean":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Windows.UI.Xaml.PropertyPath":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.PropertyPath));
                break;

            case "Windows.UI.Xaml.GridLength":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.GridLength));
                break;

            case "Int32":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.FrameworkElement":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FrameworkElement));
                break;

            case "Windows.UI.Xaml.Controls.ListBox":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ListBox));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Media.Stretch":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Stretch));
                break;

            case "Double":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Controls.ContentControl":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ContentControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.AppBar":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.AppBar));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.ToggleButton":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "Windows.UI.Xaml.Thickness":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Thickness));
                break;

            case "Windows.UI.Xaml.Controls.TextBox":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.TextBox));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "MyToolkit.Converters.NotConverter":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Converters.NotConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_NotConverter;
                xamlType = userType;
                break;

            case "MyToolkit.Converters.VisibilityConverter":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Converters.VisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_VisibilityConverter;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.WatermarkedTextBox":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.WatermarkedTextBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_2_WatermarkedTextBox;
                userType.AddMemberName("WatermarkBrush");
                userType.AddMemberName("Watermark");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.DataGrid":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.DataGrid), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_3_DataGrid;
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("CellTemplate");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Items");
                userType.AddMemberName("ShowItemDetails");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Columns");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumn>),
                                                   "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.DataGridColumn>");
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("DefaultOrderIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ItemDetailsTemplate");
                xamlType = userType;
                break;

            case "MyToolkit.Collections.IObservableView":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Collections.IObservableView), null);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.DataGridColumn>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumn>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<MyToolkit.Controls.DataGridColumn>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumn>),
                                                   "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.DataGridColumn>");
                userType.Activator = Activate_5_ObservableCollection;
                userType.CollectionAdd = VectorAdd_5_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<MyToolkit.Controls.DataGridColumn>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumn>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumn>),
                                                   "System.Collections.ObjectModel.Collection<MyToolkit.Controls.DataGridColumn>");
                userType.Activator = Activate_6_Collection;
                userType.CollectionAdd = VectorAdd_6_Collection;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.DataGridColumn":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.DataGridColumn), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("OrderPropertyPath");
                userType.AddMemberName("CanSort");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAscending");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAscendingDefault");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Width");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ImageButton":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ImageButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_8_ImageButton;
                userType.AddMemberName("State");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Content");
                userType.AddMemberName("PressedContent");
                userType.AddMemberName("OverContent");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ImageButtonState":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ImageButtonState), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::MyToolkit.Controls.ImageButtonState.Normal);
                userType.AddEnumValue("Over", global::MyToolkit.Controls.ImageButtonState.Over);
                userType.AddEnumValue("Pressed", global::MyToolkit.Controls.ImageButtonState.Pressed);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ExtendedListBox":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ExtendedListBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.ListBox"));
                userType.Activator = Activate_13_ExtendedListBox;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.Pivot":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.Pivot), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_14_Pivot;
                userType.SetContentPropertyName("MyToolkit.Controls.Pivot.Items");
                userType.AddMemberName("Items");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.PivotItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.PivotItem>");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("PreloadPivots");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectedIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.PivotItem>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.PivotItem>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<MyToolkit.Controls.PivotItem>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.PivotItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.PivotItem>");
                userType.Activator = Activate_15_ObservableCollection;
                userType.CollectionAdd = VectorAdd_15_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<MyToolkit.Controls.PivotItem>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.PivotItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.PivotItem>),
                                                   "System.Collections.ObjectModel.Collection<MyToolkit.Controls.PivotItem>");
                userType.Activator = Activate_16_Collection;
                userType.CollectionAdd = VectorAdd_16_Collection;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.PivotItem":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.PivotItem), GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_17_PivotItem;
                userType.SetContentPropertyName("MyToolkit.Controls.PivotItem.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.FadingImage":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.FadingImage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_18_FadingImage;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("FadingOpacity");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("FadingDuration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("WaitForNextImage");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case "TimeSpan":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.TimeSpan), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "MyToolkit.Paging.Page":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Paging.Page), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_21_Page;
                userType.SetContentPropertyName("MyToolkit.Paging.Page.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Frame");
                userType.AddMemberName("InternalPage");
                userType.AddMemberName("TopAppBar");
                userType.AddMemberName("BottomAppBar");
                xamlType = userType;
                break;

            case "MyToolkit.Paging.Frame":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Paging.Frame), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_22_Frame;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.AppBarToggleButton":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.AppBarToggleButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_23_AppBarToggleButton;
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.AppBarButton":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.AppBarButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_24_AppBarButton;
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.TextButton":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.TextButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_25_TextButton;
                userType.AddMemberName("ShowTextOnlyInLandscape");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.MenuListBox":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.MenuListBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_26_MenuListBox;
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ColorChooser":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ColorChooser), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_27_ColorChooser;
                userType.AddMemberName("SelectedColor");
                userType.AddMemberName("Colors");
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("B");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("G");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("R");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "Windows.UI.Color[]":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color[]), GetXamlTypeByName("System.Array"));
                xamlType = userType;
                break;

            case "System.Array":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Array), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Byte":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Byte), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.PanAndZoomViewer":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.PanAndZoomViewer), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_32_PanAndZoomViewer;
                userType.SetContentPropertyName("MyToolkit.Controls.PanAndZoomViewer.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("MaxZoomFactor");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.PanAndZoomImage":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.PanAndZoomImage), GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer"));
                userType.Activator = Activate_33_PanAndZoomImage;
                userType.SetContentPropertyName("MyToolkit.Controls.PanAndZoomImage.Content");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("Source");
                userType.AddMemberName("AutomaticZoomFactor");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("InnerMargin");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.SettingsHeader":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.SettingsHeader), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_34_SettingsHeader;
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ExtendedItemsControl":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ExtendedItemsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_35_ExtendedItemsControl;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.NavigationList":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.NavigationList), GetXamlTypeByName("MyToolkit.Controls.ExtendedListBox"));
                userType.Activator = Activate_36_NavigationList;
                xamlType = userType;
                break;

            case "MyToolkit.Controls.ExtendedTextBox":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.ExtendedTextBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_37_ExtendedTextBox;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ImmediateUpdates");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "MyToolkit.UI.PopupBase":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.UI.PopupBase), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_PopupBase;
                xamlType = userType;
                break;

            case "MyToolkit.UI.Popups.ListPickerBox":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.UI.Popups.ListPickerBox), GetXamlTypeByName("MyToolkit.UI.PopupBase"));
                userType.AddMemberName("Items");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::MyToolkit.UI.Popups.ListPickerBoxItem>),
                                                   "System.Collections.Generic.List<MyToolkit.UI.Popups.ListPickerBoxItem>");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("AllItems");
                userType.AddMemberName("OriginalSelectedItems");
                userType.AddMemberName("Canceled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HasSelectionChanged");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<MyToolkit.UI.Popups.ListPickerBoxItem>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::MyToolkit.UI.Popups.ListPickerBoxItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::MyToolkit.UI.Popups.ListPickerBoxItem>),
                                                   "System.Collections.Generic.List<MyToolkit.UI.Popups.ListPickerBoxItem>");
                userType.Activator = Activate_40_List;
                userType.CollectionAdd = VectorAdd_40_List;
                xamlType = userType;
                break;

            case "MyToolkit.UI.Popups.ListPickerBoxItem":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.UI.Popups.ListPickerBoxItem), GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_ListPickerBoxItem;
                userType.AddMemberName("IsChecked");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Item");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "System.Collections.IList":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.IList), null);
                xamlType = userType;
                break;

            case "MyToolkit.Controls.TimePicker":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.TimePicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_43_TimePicker;
                userType.AddMemberName("ShowSecond");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AllowNull");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectedTime");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "System.Nullable<System.DateTime>":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.DateTime>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "MyToolkit.Controls.DatePicker":
                userType = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MyToolkit.Controls.DatePicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_45_DatePicker;
                userType.AddMemberName("AllowNull");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectedDate");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_WatermarkedTextBox_WatermarkBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.WatermarkBrush;
        }
        private void set_0_WatermarkedTextBox_WatermarkBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.WatermarkBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_1_WatermarkedTextBox_Watermark(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.Watermark;
        }
        private void set_1_WatermarkedTextBox_Watermark(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.Watermark = (global::System.String)Value;
        }
        private object get_2_WatermarkedTextBox_Text(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.Text;
        }
        private void set_2_WatermarkedTextBox_Text(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_3_DataGrid_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.HeaderTemplate;
        }
        private void set_3_DataGrid_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_4_DataGrid_CellTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.CellTemplate;
        }
        private void set_4_DataGrid_CellTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.CellTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_5_DataGrid_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedItem;
        }
        private void set_5_DataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_6_DataGrid_Items(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Items;
        }
        private object get_7_DataGrid_ShowItemDetails(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ShowItemDetails;
        }
        private object get_8_DataGrid_Columns(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Columns;
        }
        private object get_9_DataGridColumn_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.OrderPropertyPath;
        }
        private object get_10_DataGridColumn_CanSort(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.CanSort;
        }
        private void set_10_DataGridColumn_CanSort(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            that.CanSort = (global::System.Boolean)Value;
        }
        private object get_11_DataGridColumn_IsSelected(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.IsSelected;
        }
        private object get_12_DataGridColumn_IsAscending(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.IsAscending;
        }
        private object get_13_DataGridColumn_IsAscendingDefault(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.IsAscendingDefault;
        }
        private void set_13_DataGridColumn_IsAscendingDefault(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            that.IsAscendingDefault = (global::System.Boolean)Value;
        }
        private object get_14_DataGridColumn_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.Header;
        }
        private void set_14_DataGridColumn_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_15_DataGridColumn_Width(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            return that.Width;
        }
        private void set_15_DataGridColumn_Width(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumn)instance;
            that.Width = (global::Windows.UI.Xaml.GridLength)Value;
        }
        private object get_16_DataGrid_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemsSource;
        }
        private void set_16_DataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_17_DataGrid_DefaultOrderIndex(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.DefaultOrderIndex;
        }
        private void set_17_DataGrid_DefaultOrderIndex(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.DefaultOrderIndex = (global::System.Int32)Value;
        }
        private object get_18_DataGrid_ItemDetailsTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemDetailsTemplate;
        }
        private void set_18_DataGrid_ItemDetailsTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemDetailsTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_19_ImageButton_State(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.State;
        }
        private object get_20_ImageButton_Command(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Command;
        }
        private void set_20_ImageButton_Command(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_21_ImageButton_CommandParameter(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.CommandParameter;
        }
        private void set_21_ImageButton_CommandParameter(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_22_ImageButton_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Content;
        }
        private void set_22_ImageButton_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_23_ImageButton_PressedContent(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.PressedContent;
        }
        private void set_23_ImageButton_PressedContent(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.PressedContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_24_ImageButton_OverContent(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.OverContent;
        }
        private void set_24_ImageButton_OverContent(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.OverContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_25_ImageButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Header;
        }
        private void set_25_ImageButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_26_Pivot_Items(object instance)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            return that.Items;
        }
        private object get_27_PivotItem_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.PivotItem)instance;
            return that.Content;
        }
        private void set_27_PivotItem_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PivotItem)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_28_PivotItem_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.PivotItem)instance;
            return that.Header;
        }
        private void set_28_PivotItem_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PivotItem)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_29_Pivot_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            return that.HeaderTemplate;
        }
        private void set_29_Pivot_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_30_Pivot_PreloadPivots(object instance)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            return that.PreloadPivots;
        }
        private void set_30_Pivot_PreloadPivots(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            that.PreloadPivots = (global::System.Boolean)Value;
        }
        private object get_31_Pivot_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            return that.SelectedItem;
        }
        private void set_31_Pivot_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_32_Pivot_SelectedIndex(object instance)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            return that.SelectedIndex;
        }
        private void set_32_Pivot_SelectedIndex(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Pivot)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_33_FadingImage_Stretch(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.Stretch;
        }
        private void set_33_FadingImage_Stretch(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_34_FadingImage_FadingOpacity(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.FadingOpacity;
        }
        private void set_34_FadingImage_FadingOpacity(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.FadingOpacity = (global::System.Double)Value;
        }
        private object get_35_FadingImage_FadingDuration(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.FadingDuration;
        }
        private void set_35_FadingImage_FadingDuration(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.FadingDuration = (global::System.TimeSpan)Value;
        }
        private object get_36_FadingImage_WaitForNextImage(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.WaitForNextImage;
        }
        private void set_36_FadingImage_WaitForNextImage(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.WaitForNextImage = (global::System.Boolean)Value;
        }
        private object get_37_FadingImage_Source(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.Source;
        }
        private void set_37_FadingImage_Source(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_38_Page_Content(object instance)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            return that.Content;
        }
        private void set_38_Page_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_39_Page_Frame(object instance)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            return that.Frame;
        }
        private object get_40_Page_InternalPage(object instance)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            return that.InternalPage;
        }
        private object get_41_Page_TopAppBar(object instance)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            return that.TopAppBar;
        }
        private void set_41_Page_TopAppBar(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            that.TopAppBar = (global::Windows.UI.Xaml.Controls.AppBar)Value;
        }
        private object get_42_Page_BottomAppBar(object instance)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            return that.BottomAppBar;
        }
        private void set_42_Page_BottomAppBar(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.Page)instance;
            that.BottomAppBar = (global::Windows.UI.Xaml.Controls.AppBar)Value;
        }
        private object get_43_AppBarToggleButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.AppBarToggleButton)instance;
            return that.Header;
        }
        private void set_43_AppBarToggleButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.AppBarToggleButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_44_AppBarButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.AppBarButton)instance;
            return that.Header;
        }
        private void set_44_AppBarButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.AppBarButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_45_TextButton_ShowTextOnlyInLandscape(object instance)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            return that.ShowTextOnlyInLandscape;
        }
        private void set_45_TextButton_ShowTextOnlyInLandscape(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            that.ShowTextOnlyInLandscape = (global::System.Boolean)Value;
        }
        private object get_46_TextButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            return that.Header;
        }
        private void set_46_TextButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_47_MenuListBox_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.MenuListBox)instance;
            return that.ItemsSource;
        }
        private void set_47_MenuListBox_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MenuListBox)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_48_ColorChooser_SelectedColor(object instance)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            return that.SelectedColor;
        }
        private void set_48_ColorChooser_SelectedColor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            that.SelectedColor = (global::Windows.UI.Color)Value;
        }
        private object get_49_ColorChooser_Colors(object instance)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            return that.Colors;
        }
        private void set_49_ColorChooser_Colors(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            that.Colors = (global::Windows.UI.Color[])Value;
        }
        private object get_50_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_50_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_51_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_51_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_52_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_52_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_53_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_53_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_54_PanAndZoomViewer_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            return that.Content;
        }
        private void set_54_PanAndZoomViewer_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_55_PanAndZoomViewer_MaxZoomFactor(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            return that.MaxZoomFactor;
        }
        private void set_55_PanAndZoomViewer_MaxZoomFactor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            that.MaxZoomFactor = (global::System.Double)Value;
        }
        private object get_56_PanAndZoomImage_Stretch(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.Stretch;
        }
        private void set_56_PanAndZoomImage_Stretch(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_57_PanAndZoomImage_Source(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.Source;
        }
        private void set_57_PanAndZoomImage_Source(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_58_PanAndZoomImage_AutomaticZoomFactor(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.AutomaticZoomFactor;
        }
        private void set_58_PanAndZoomImage_AutomaticZoomFactor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.AutomaticZoomFactor = (global::System.Boolean)Value;
        }
        private object get_59_PanAndZoomImage_InnerMargin(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.InnerMargin;
        }
        private void set_59_PanAndZoomImage_InnerMargin(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.InnerMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_60_SettingsHeader_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.SettingsHeader)instance;
            return that.Header;
        }
        private void set_60_SettingsHeader_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.SettingsHeader)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_61_ExtendedTextBox_Text(object instance)
        {
            var that = (global::MyToolkit.Controls.ExtendedTextBox)instance;
            return that.Text;
        }
        private void set_61_ExtendedTextBox_Text(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ExtendedTextBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_62_ExtendedTextBox_ImmediateUpdates(object instance)
        {
            var that = (global::MyToolkit.Controls.ExtendedTextBox)instance;
            return that.ImmediateUpdates;
        }
        private void set_62_ExtendedTextBox_ImmediateUpdates(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ExtendedTextBox)instance;
            that.ImmediateUpdates = (global::System.Boolean)Value;
        }
        private object get_63_ListPickerBox_Items(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.Items;
        }
        private object get_64_ListPickerBoxItem_IsChecked(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBoxItem)instance;
            return that.IsChecked;
        }
        private void set_64_ListPickerBoxItem_IsChecked(object instance, object Value)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBoxItem)instance;
            that.IsChecked = (global::System.Boolean)Value;
        }
        private object get_65_ListPickerBoxItem_Item(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBoxItem)instance;
            return that.Item;
        }
        private void set_65_ListPickerBoxItem_Item(object instance, object Value)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBoxItem)instance;
            that.Item = (global::System.Object)Value;
        }
        private object get_66_ListPickerBox_SelectedItems(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.SelectedItems;
        }
        private object get_67_ListPickerBox_AllItems(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.AllItems;
        }
        private object get_68_ListPickerBox_OriginalSelectedItems(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.OriginalSelectedItems;
        }
        private object get_69_ListPickerBox_Canceled(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.Canceled;
        }
        private object get_70_ListPickerBox_HasSelectionChanged(object instance)
        {
            var that = (global::MyToolkit.UI.Popups.ListPickerBox)instance;
            return that.HasSelectionChanged;
        }
        private object get_71_TimePicker_ShowSecond(object instance)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            return that.ShowSecond;
        }
        private void set_71_TimePicker_ShowSecond(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            that.ShowSecond = (global::System.Boolean)Value;
        }
        private object get_72_TimePicker_AllowNull(object instance)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            return that.AllowNull;
        }
        private void set_72_TimePicker_AllowNull(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            that.AllowNull = (global::System.Boolean)Value;
        }
        private object get_73_TimePicker_SelectedTime(object instance)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            return that.SelectedTime;
        }
        private void set_73_TimePicker_SelectedTime(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TimePicker)instance;
            that.SelectedTime = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_74_DatePicker_AllowNull(object instance)
        {
            var that = (global::MyToolkit.Controls.DatePicker)instance;
            return that.AllowNull;
        }
        private void set_74_DatePicker_AllowNull(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DatePicker)instance;
            that.AllowNull = (global::System.Boolean)Value;
        }
        private object get_75_DatePicker_SelectedDate(object instance)
        {
            var that = (global::MyToolkit.Controls.DatePicker)instance;
            return that.SelectedDate;
        }
        private void set_75_DatePicker_SelectedDate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DatePicker)instance;
            that.SelectedDate = (global::System.Nullable<global::System.DateTime>)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember xamlMember = null;
            global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyToolkit.Controls.WatermarkedTextBox.WatermarkBrush":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "WatermarkBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_0_WatermarkedTextBox_WatermarkBrush;
                xamlMember.Setter = set_0_WatermarkedTextBox_WatermarkBrush;
                break;
            case "MyToolkit.Controls.WatermarkedTextBox.Watermark":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Watermark", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_WatermarkedTextBox_Watermark;
                xamlMember.Setter = set_1_WatermarkedTextBox_Watermark;
                break;
            case "MyToolkit.Controls.WatermarkedTextBox.Text":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_WatermarkedTextBox_Text;
                xamlMember.Setter = set_2_WatermarkedTextBox_Text;
                break;
            case "MyToolkit.Controls.DataGrid.HeaderTemplate":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DataGrid_HeaderTemplate;
                xamlMember.Setter = set_3_DataGrid_HeaderTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.CellTemplate":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "CellTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DataGrid_CellTemplate;
                xamlMember.Setter = set_4_DataGrid_CellTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.SelectedItem":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DataGrid_SelectedItem;
                xamlMember.Setter = set_5_DataGrid_SelectedItem;
                break;
            case "MyToolkit.Controls.DataGrid.Items":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Items", "MyToolkit.Collections.IObservableView");
                xamlMember.Getter = get_6_DataGrid_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.ShowItemDetails":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ShowItemDetails", "Boolean");
                xamlMember.Getter = get_7_DataGrid_ShowItemDetails;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.Columns":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Columns", "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.DataGridColumn>");
                xamlMember.Getter = get_8_DataGrid_Columns;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumn.OrderPropertyPath":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_9_DataGridColumn_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumn.CanSort":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "CanSort", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DataGridColumn_CanSort;
                xamlMember.Setter = set_10_DataGridColumn_CanSort;
                break;
            case "MyToolkit.Controls.DataGridColumn.IsSelected":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DataGridColumn_IsSelected;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumn.IsAscending":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "IsAscending", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DataGridColumn_IsAscending;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumn.IsAscendingDefault":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "IsAscendingDefault", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DataGridColumn_IsAscendingDefault;
                xamlMember.Setter = set_13_DataGridColumn_IsAscendingDefault;
                break;
            case "MyToolkit.Controls.DataGridColumn.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_DataGridColumn_Header;
                xamlMember.Setter = set_14_DataGridColumn_Header;
                break;
            case "MyToolkit.Controls.DataGridColumn.Width":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumn");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Width", "Windows.UI.Xaml.GridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_DataGridColumn_Width;
                xamlMember.Setter = set_15_DataGridColumn_Width;
                break;
            case "MyToolkit.Controls.DataGrid.ItemsSource":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DataGrid_ItemsSource;
                xamlMember.Setter = set_16_DataGrid_ItemsSource;
                break;
            case "MyToolkit.Controls.DataGrid.DefaultOrderIndex":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "DefaultOrderIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DataGrid_DefaultOrderIndex;
                xamlMember.Setter = set_17_DataGrid_DefaultOrderIndex;
                break;
            case "MyToolkit.Controls.DataGrid.ItemDetailsTemplate":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ItemDetailsTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_DataGrid_ItemDetailsTemplate;
                xamlMember.Setter = set_18_DataGrid_ItemDetailsTemplate;
                break;
            case "MyToolkit.Controls.ImageButton.State":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "State", "MyToolkit.Controls.ImageButtonState");
                xamlMember.Getter = get_19_ImageButton_State;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.ImageButton.Command":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ImageButton_Command;
                xamlMember.Setter = set_20_ImageButton_Command;
                break;
            case "MyToolkit.Controls.ImageButton.CommandParameter":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ImageButton_CommandParameter;
                xamlMember.Setter = set_21_ImageButton_CommandParameter;
                break;
            case "MyToolkit.Controls.ImageButton.Content":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ImageButton_Content;
                xamlMember.Setter = set_22_ImageButton_Content;
                break;
            case "MyToolkit.Controls.ImageButton.PressedContent":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "PressedContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ImageButton_PressedContent;
                xamlMember.Setter = set_23_ImageButton_PressedContent;
                break;
            case "MyToolkit.Controls.ImageButton.OverContent":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "OverContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ImageButton_OverContent;
                xamlMember.Setter = set_24_ImageButton_OverContent;
                break;
            case "MyToolkit.Controls.ImageButton.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ImageButton_Header;
                xamlMember.Setter = set_25_ImageButton_Header;
                break;
            case "MyToolkit.Controls.Pivot.Items":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Pivot");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection<MyToolkit.Controls.PivotItem>");
                xamlMember.Getter = get_26_Pivot_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.PivotItem.Content":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PivotItem");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_PivotItem_Content;
                xamlMember.Setter = set_27_PivotItem_Content;
                break;
            case "MyToolkit.Controls.PivotItem.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PivotItem");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_PivotItem_Header;
                xamlMember.Setter = set_28_PivotItem_Header;
                break;
            case "MyToolkit.Controls.Pivot.HeaderTemplate":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Pivot");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_Pivot_HeaderTemplate;
                xamlMember.Setter = set_29_Pivot_HeaderTemplate;
                break;
            case "MyToolkit.Controls.Pivot.PreloadPivots":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Pivot");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "PreloadPivots", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_Pivot_PreloadPivots;
                xamlMember.Setter = set_30_Pivot_PreloadPivots;
                break;
            case "MyToolkit.Controls.Pivot.SelectedItem":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Pivot");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_Pivot_SelectedItem;
                xamlMember.Setter = set_31_Pivot_SelectedItem;
                break;
            case "MyToolkit.Controls.Pivot.SelectedIndex":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Pivot");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_Pivot_SelectedIndex;
                xamlMember.Setter = set_32_Pivot_SelectedIndex;
                break;
            case "MyToolkit.Controls.FadingImage.Stretch":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_FadingImage_Stretch;
                xamlMember.Setter = set_33_FadingImage_Stretch;
                break;
            case "MyToolkit.Controls.FadingImage.FadingOpacity":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "FadingOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_FadingImage_FadingOpacity;
                xamlMember.Setter = set_34_FadingImage_FadingOpacity;
                break;
            case "MyToolkit.Controls.FadingImage.FadingDuration":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "FadingDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_FadingImage_FadingDuration;
                xamlMember.Setter = set_35_FadingImage_FadingDuration;
                break;
            case "MyToolkit.Controls.FadingImage.WaitForNextImage":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "WaitForNextImage", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_FadingImage_WaitForNextImage;
                xamlMember.Setter = set_36_FadingImage_WaitForNextImage;
                break;
            case "MyToolkit.Controls.FadingImage.Source":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_FadingImage_Source;
                xamlMember.Setter = set_37_FadingImage_Source;
                break;
            case "MyToolkit.Paging.Page.Content":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.Page");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_Page_Content;
                xamlMember.Setter = set_38_Page_Content;
                break;
            case "MyToolkit.Paging.Page.Frame":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.Page");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Frame", "MyToolkit.Paging.Frame");
                xamlMember.Getter = get_39_Page_Frame;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.Page.InternalPage":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.Page");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "InternalPage", "Windows.UI.Xaml.Controls.Page");
                xamlMember.Getter = get_40_Page_InternalPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.Page.TopAppBar":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.Page");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "TopAppBar", "Windows.UI.Xaml.Controls.AppBar");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_Page_TopAppBar;
                xamlMember.Setter = set_41_Page_TopAppBar;
                break;
            case "MyToolkit.Paging.Page.BottomAppBar":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.Page");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "BottomAppBar", "Windows.UI.Xaml.Controls.AppBar");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_Page_BottomAppBar;
                xamlMember.Setter = set_42_Page_BottomAppBar;
                break;
            case "MyToolkit.Controls.AppBarToggleButton.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.AppBarToggleButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_AppBarToggleButton_Header;
                xamlMember.Setter = set_43_AppBarToggleButton_Header;
                break;
            case "MyToolkit.Controls.AppBarButton.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.AppBarButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_AppBarButton_Header;
                xamlMember.Setter = set_44_AppBarButton_Header;
                break;
            case "MyToolkit.Controls.TextButton.ShowTextOnlyInLandscape":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TextButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ShowTextOnlyInLandscape", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_TextButton_ShowTextOnlyInLandscape;
                xamlMember.Setter = set_45_TextButton_ShowTextOnlyInLandscape;
                break;
            case "MyToolkit.Controls.TextButton.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TextButton");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_TextButton_Header;
                xamlMember.Setter = set_46_TextButton_Header;
                break;
            case "MyToolkit.Controls.MenuListBox.ItemsSource":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MenuListBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_MenuListBox_ItemsSource;
                xamlMember.Setter = set_47_MenuListBox_ItemsSource;
                break;
            case "MyToolkit.Controls.ColorChooser.SelectedColor":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ColorChooser");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ColorChooser_SelectedColor;
                xamlMember.Setter = set_48_ColorChooser_SelectedColor;
                break;
            case "MyToolkit.Controls.ColorChooser.Colors":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ColorChooser");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Colors", "Windows.UI.Color[]");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ColorChooser_Colors;
                xamlMember.Setter = set_49_ColorChooser_Colors;
                break;
            case "Windows.UI.Color.A":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_50_Color_A;
                xamlMember.Setter = set_50_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_51_Color_B;
                xamlMember.Setter = set_51_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_52_Color_G;
                xamlMember.Setter = set_52_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_53_Color_R;
                xamlMember.Setter = set_53_Color_R;
                break;
            case "MyToolkit.Controls.PanAndZoomViewer.Content":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_PanAndZoomViewer_Content;
                xamlMember.Setter = set_54_PanAndZoomViewer_Content;
                break;
            case "MyToolkit.Controls.PanAndZoomViewer.MaxZoomFactor":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "MaxZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_PanAndZoomViewer_MaxZoomFactor;
                xamlMember.Setter = set_55_PanAndZoomViewer_MaxZoomFactor;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.Stretch":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_PanAndZoomImage_Stretch;
                xamlMember.Setter = set_56_PanAndZoomImage_Stretch;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.Source":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_PanAndZoomImage_Source;
                xamlMember.Setter = set_57_PanAndZoomImage_Source;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.AutomaticZoomFactor":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "AutomaticZoomFactor", "Boolean");
                xamlMember.Getter = get_58_PanAndZoomImage_AutomaticZoomFactor;
                xamlMember.Setter = set_58_PanAndZoomImage_AutomaticZoomFactor;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.InnerMargin":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "InnerMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_PanAndZoomImage_InnerMargin;
                xamlMember.Setter = set_59_PanAndZoomImage_InnerMargin;
                break;
            case "MyToolkit.Controls.SettingsHeader.Header":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.SettingsHeader");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_SettingsHeader_Header;
                xamlMember.Setter = set_60_SettingsHeader_Header;
                break;
            case "MyToolkit.Controls.ExtendedTextBox.Text":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ExtendedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_ExtendedTextBox_Text;
                xamlMember.Setter = set_61_ExtendedTextBox_Text;
                break;
            case "MyToolkit.Controls.ExtendedTextBox.ImmediateUpdates":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ExtendedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ImmediateUpdates", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_ExtendedTextBox_ImmediateUpdates;
                xamlMember.Setter = set_62_ExtendedTextBox_ImmediateUpdates;
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.Items":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.List<MyToolkit.UI.Popups.ListPickerBoxItem>");
                xamlMember.Getter = get_63_ListPickerBox_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.UI.Popups.ListPickerBoxItem.IsChecked":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBoxItem");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "IsChecked", "Boolean");
                xamlMember.Getter = get_64_ListPickerBoxItem_IsChecked;
                xamlMember.Setter = set_64_ListPickerBoxItem_IsChecked;
                break;
            case "MyToolkit.UI.Popups.ListPickerBoxItem.Item":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBoxItem");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Item", "Object");
                xamlMember.Getter = get_65_ListPickerBoxItem_Item;
                xamlMember.Setter = set_65_ListPickerBoxItem_Item;
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.SelectedItems":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.IList");
                xamlMember.Getter = get_66_ListPickerBox_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.AllItems":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "AllItems", "System.Collections.IList");
                xamlMember.Getter = get_67_ListPickerBox_AllItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.OriginalSelectedItems":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "OriginalSelectedItems", "System.Collections.IList");
                xamlMember.Getter = get_68_ListPickerBox_OriginalSelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.Canceled":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "Canceled", "Boolean");
                xamlMember.Getter = get_69_ListPickerBox_Canceled;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.UI.Popups.ListPickerBox.HasSelectionChanged":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.UI.Popups.ListPickerBox");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "HasSelectionChanged", "Boolean");
                xamlMember.Getter = get_70_ListPickerBox_HasSelectionChanged;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.TimePicker.ShowSecond":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TimePicker");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "ShowSecond", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_TimePicker_ShowSecond;
                xamlMember.Setter = set_71_TimePicker_ShowSecond;
                break;
            case "MyToolkit.Controls.TimePicker.AllowNull":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TimePicker");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "AllowNull", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_TimePicker_AllowNull;
                xamlMember.Setter = set_72_TimePicker_AllowNull;
                break;
            case "MyToolkit.Controls.TimePicker.SelectedTime":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TimePicker");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedTime", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_TimePicker_SelectedTime;
                xamlMember.Setter = set_73_TimePicker_SelectedTime;
                break;
            case "MyToolkit.Controls.DatePicker.AllowNull":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DatePicker");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "AllowNull", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_DatePicker_AllowNull;
                xamlMember.Setter = set_74_DatePicker_AllowNull;
                break;
            case "MyToolkit.Controls.DatePicker.SelectedDate":
                userType = (global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DatePicker");
                xamlMember = new global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlMember(this, "SelectedDate", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_DatePicker_SelectedDate;
                xamlMember.Setter = set_75_DatePicker_SelectedDate;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlSystemBaseType
    {
        global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MyToolkit.MyToolkit_WinRT_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


